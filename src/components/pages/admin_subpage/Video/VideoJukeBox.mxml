<?xml version="1.0" encoding="utf-8"?>
<!--- Element video stworzony na podstawie strony: http://livedocs.adobe.com/flex/3/html/help.html?content=Working_with_Video_32.html -->
<s:VGroup 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	creationComplete="initApp()"
	width="100%"
	textAlign="center"
	horizontalAlign="center">
	<fx:Script>
		<![CDATA[		
			import mx.controls.ProgressBarMode;
			import mx.core.FlexGlobals;
			
			/**
			 * The amount of time between calls to update the playhead timer, in 
			 * milliseconds.
			 */
			private const PLAYHEAD_UPDATE_INTERVAL_MS:uint = 10;
			
			/**
			 * The path to the XML file containing the video playlist.
			 */
			private const PLAYLIST_XML_URL:String = "playlist.xml";
			
			/**
			 * The client object to use for the NetStream object.
			 */
			private var client:Object;
			
			/**
			 * The index of the currently playing video.
			 */
			private var idx:uint = 0;
			private var videoPath:String;
			
			/**
			 * A copy of the current video's metadata object.
			 */
			private var meta:Object;
			private var nc:NetConnection;
			private var ns:NetStream;
			private var playlist:XML;
			private var t:Timer;
			private var uldr:URLLoader;
			private var vid:Video;
			private var videosXML:XMLList;
			
			/**
			 * The SoundTransform object used to set the volume for the NetStream.
			 */
			private var volumeTransform:SoundTransform;
			
			/**
			 * Constructor
			 */
			private function initApp():void {
				// Initialize the uldr variable which will be used to load the external 
				// playlist XML file.
				//main();
			}
			
			/**
			 * The main application.
			 */
			private function main():void {
				volumeTransform = new SoundTransform();
				
				// Create the client object for the NetStream, and set up a callback
				// handler for the onMetaData event.
				client = new Object();
				client.onMetaData = metadataHandler;
				
				nc = new NetConnection();
				nc.connect(null);
				
				// Initialize the NetSteam object, add a listener for the netStatus 
				// event, and set the client for the NetStream.
				ns = new NetStream(nc);
				ns.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
				ns.client = client;
				
				// Initialize the Video object, attach the NetStram, and add the Video
				// object to the display list.
				vid = new Video();
				//vid.x = 20;
				//vid.y = 75;
				vid.attachNetStream(ns);
				videoContainer.addChild(vid);
				
				// Begin playback of the first video.
				playVideo();
				
				// Initialize the Timer object and set the delay to
				// PLAYHEAD_UPDATE_INTERVAL_MS milliseconds. 
				t = new Timer(PLAYHEAD_UPDATE_INTERVAL_MS);
				t.addEventListener(TimerEvent.TIMER, timerHandler);
				
				// Configure the positionBar ProgressBar instance and set the mode to
				// MANUAL. Progress  bar values will be explicitly set using the
				// setProgress() method.
				positionBar.mode = ProgressBarMode.MANUAL;
				
				// Configure the volumeSlider Slider component instance. The maximum 
				// value is set to 1 because the volume in the SoundTransform object 
				// is set to a number between 0 and 1. The snapInterval and tickInterval 
				// properties are set to 0.1 which allows users to set the volume to 
				// 0, 0.1 - 0.9, 1.0 which allows users to increment or decrement the 
				// volume by 10%.
				volumeSlider.value = volumeTransform.volume;
				volumeSlider.minimum = 0;
				volumeSlider.maximum = 1;
				volumeSlider.snapInterval = 0.1;
				volumeSlider.tickInterval = volumeSlider.snapInterval;
				
				// Setting the liveDragging property to true causes the Slider 
				// instance's change event to be dispatched whenever the slider is 
				// moved, rather than when the user releases the slider thumb.
				volumeSlider.liveDragging = true;
				volumeSlider.addEventListener(Event.CHANGE, volumeChangeHandler);
				
				// Configure the various Button instances. Each Button instance uses 
				// the same click handler.
				playButton.addEventListener(MouseEvent.CLICK, buttonClickHandler);
				pauseButton.addEventListener(MouseEvent.CLICK, buttonClickHandler);
				stopButton.addEventListener(MouseEvent.CLICK, buttonClickHandler);
			}
			
			/**
			 * Event listener for the volumeSlider instance. Called when the user 
			 * changes the value of the volume slider.
			 */
			private function volumeChangeHandler(e:Event):void {
				// Set the volumeTransform's volume property to the current value of the 
				// Slider and set the NetStream object's soundTransform property.
				volumeTransform.volume = volumeSlider.value;
				ns.soundTransform = volumeTransform;
			}
			
			/**
			 * Event listener for the ns object. Called when the net stream's status 
			 * changes.
			 */
			private function netStatusHandler(event:NetStatusEvent):void {
				try {
					switch (event.info.code) {
						case "NetStream.Play.Start" :
							// If the current code is Start, start the timer object.
							t.start();
							break;
						case "NetStream.Play.StreamNotFound" :
						case "NetStream.Play.Stop" :
							// If the current code is Stop or StreamNotFound, stop 
							// the timer object and play the next video in the playlist.
							break;
					}
				} catch (error:TypeError) {
					// Ignore any errors.
				}
			}
			
			/**
			 * Event listener for the ns object's client property. This method is called 
			 * when the net stream object receives metadata information for a video.
			 */
			private function metadataHandler(metadataObj:Object):void {
				// Store the metadata information in the meta object.
				meta = metadataObj;
				// Resize the Video instance on the display list with the video's width 
				// and height from the metadata object.
				vid.width = meta.width;
				vid.height = meta.height;
				videoContainer.width = meta.width;
				videoContainer.height = meta.height;
				// Reposition and resize the positionBar progress bar based on the 
				// current video's dimensions.
				//this.validateDisplayList();
				//positionBar.move(vid.x, vid.y + vid.height);
				//positionBar.width = vid.width;
			}
			
			/**
			 * Ustawiamy ścieżkę do video
			 */
			public function setVideo(path:String):void
			{
				videoPath = path;
				main();
			}
			
			/**
			 * Retrieve the current video from the playlist XML object.
			 */
			public function getVideo():String {
				//return videosXML[idx].@url;
				return videoPath;
			}
			
			/**
			 * Play the currently selected video.
			 */
			private function playVideo():void {
				if(getVideo() != '')
				{
					var url:String = FlexGlobals.topLevelApplication.getVideoPath() + getVideo();
					ns.play(url);
					ns.pause();
				}
			}
			
			
			/**
			 * Click handler for each of the video playback buttons.
			 */
			private function buttonClickHandler(event:MouseEvent):void {
				// Use a switch statement to determine which button was clicked.
				switch (event.currentTarget) {
					case playButton :
						// If the play button was clicked, resume the video playback. 
						// If the video was already playing, this has no effect.
						if(ns!=null)
						{
							ns.resume();
						}
						break;
					case pauseButton :
						// If the pause button was clicked, pause the video playback. 
						// If the video was already playing, the video will be paused. 
						// If the video was already paused, the video will be resumed.
						if(ns!=null)
						{
							ns.togglePause();
						}
						break;
					case stopButton :
						// If the stop button was clicked, pause the video playback 
						// and reset the playhead back to the beginning of the video.
						ns.pause();
						ns.seek(0);
						t = new Timer(PLAYHEAD_UPDATE_INTERVAL_MS);
						t.addEventListener(TimerEvent.TIMER, timerHandler);
						positionBar.setProgress(0, meta.duration);
						positionLabel.text = 0 + " of " + meta.duration.toFixed(1) + " seconds";	
						break;
				}
			}
			
			/**
			 * Event handler for the timer object. This method is called every 
			 * PLAYHEAD_UPDATE_INTERVAL_MS milliseconds as long as the timer is running.
			 */
			private function timerHandler(event:TimerEvent):void {
				try {
					// Update the progress bar and label based on the amount of video
					// that has played back.
					positionBar.setProgress(ns.time, meta.duration);
					positionLabel.text = ns.time.toFixed(1) + " of " + meta.duration.toFixed(1) + " seconds";
					//jesli skończyliśmy odtwarzać video to zatrzymujemy
					if (ns.time.toFixed(1) == meta.duration.toFixed(1))
					{
						stopButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));
					}
				} catch (error:Error) {
					// Ignore this error.
				}
			}
			
			
			protected function positionBar_clickHandler(event:MouseEvent):void
			{
				if(ns=null)
				{
						var zm:Number = (event.localX / positionBar.width) * positionBar.maximum;
						ns.seek(zm);
						positionBar.setProgress(zm, meta.duration);
				}
			}
			
		]]>
	</fx:Script>
	
	<mx:UIComponent id="videoContainer" />
	
	<s:HGroup width="100%" textAlign="center" horizontalAlign="center">
		<mx:Button id="playButton"  label="Play"/>
		<mx:Button id="pauseButton"   label="Pause"/>
		<mx:Button id="stopButton"  label="Stop"/>
		
		
	</s:HGroup>
	<s:HGroup width="100%" horizontalAlign="center">
		<s:Label id="volume" text="Volume:" />
		<mx:HSlider id="volumeSlider"  />
	</s:HGroup>
	<s:HGroup width="100%" horizontalAlign="center">
		
		<mx:ProgressBar id="positionBar"  label="" click="positionBar_clickHandler(event)"/>
		<mx:Label id="positionLabel" />
	</s:HGroup>
	
	
</s:VGroup>